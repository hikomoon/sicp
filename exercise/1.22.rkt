#lang racket
(require sicp)
(require "../utils/index.rkt")

(define (smallest-divisor n)
    (find-divisor n 2))
(define (find-divisor n test-divisor)
    (cond ((> (sq test-divisor) n) n)
        ((divides? n test-divisor) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder a b) 0))
(define (prime? n)
    (= (smallest-divisor n) n))

(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time))

(define (next-odd n)
    (if (odd? n)
        (+ 2 n)
        (+ 1 n)))
(define (search-for-primes n count)
    (cond ((= count 0) 
            (newline)
            (display "done"))
        ((prime? n) 
            (timed-prime-test n)
            (search-for-primes (next-odd n) (- count 1)))
        (else (search-for-primes (next-odd n) count))))

; (search-for-primes 1000 3)
; (search-for-primes 10000 3)
(search-for-primes 100000 3)
(search-for-primes 1000000 3)
(search-for-primes 10000000 3)
(search-for-primes 100000000 3)
(search-for-primes 1000000000 3)